" -------------------- Own Setting Start ---------------------------------------
function! EndSt()
    let ext = &filetype

    if (ext == 'c' || ext == 'cpp' || ext == 'java' || ext == 'js')
        return ';'
    elseif (ext == 'python')
        return ':'
    else
        return ''
endfunction

let mapleader=";"
inoremap <leader>e <Esc>
inoremap <leader>o <Esc>o
inoremap <leader>O <Esc>O
inoremap <leader>4 <Esc>$a
nnoremap <leader>4 $
inoremap <leader>6 <Esc>^i
nnoremap <leader>6 ^
inoremap <leader>w <ESC>:w<CR>a
nnoremap <leader>w :w<CR>
inoremap <leader>f <C-O>A<C-R>=EndSt()<C-M><CR>
nnoremap <leader>s :vimgrep /
nnoremap <leader>] :cnext<CR>
nnoremap <leader>[ :cprevious<CR>

set nu
set tabstop=4
set shiftwidth=4
set sts=4
au Bufenter *.\(rb\|ruby\|py\|js\) set ts=2 sw=2 sts=2
set expandtab
set smartindent
set ignorecase
syntax enable
set fileencodings=utf8,euc-kr
set title
set colorcolumn=81
set cursorline
set autochdir
set clipboard=unnamed

highlight OverLength ctermbg=blue ctermfg=white guibg=#592929
match OverLength /\%81v.\+/
set laststatus=2

set backupdir=~/.vimbackup
" -------------------- Own Setting End -----------------------------------------

" -------------------- An example for a vimrc file. start ----------------------
"
" Maintainer:   Bram Moolenaar <Bram@vim.org>
" Last change:  2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"         for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"       for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup      " do not keep a backup file, use versions instead
else
  set backup        " keep a backup file
endif
set history=50      " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch       " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif
" -------------------- An example for a vimrc file. end ------------------------

" -------------------- Vundle Setting Start ------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://github.com/wincent/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}

" plugin YouCompleteMe
Plugin 'Valloric/YouCompleteMe'

" plugin more improved cpp keyword highlighter
Plugin 'octol/vim-cpp-enhanced-highlight'

" plugin solarized color theme
Plugin 'git://github.com/altercation/vim-colors-solarized.git'

" plugin auto brackets
Plugin 'git://github.com/jiangmiao/auto-pairs.git'

" plugin snip(short coding) inserter
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" plugin colorful status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" plugin file finder for vim
Plugin 'ctrlpvim/ctrlp.vim'

" plugin file explorer for vim
Plugin 'scrooloose/nerdtree'

" plugin auto add recursive cscope
Plugin 'git://github.com/chocownd/autoload_cscope.vim.git'

" plugin tag list
Plugin 'taglist.vim'

" plugin tag auto update
Plugin 'git://github.com/xolox/vim-easytags.git'
Plugin 'git://github.com/xolox/vim-misc.git'

" plugin show git diff
Plugin 'git://github.com/airblade/vim-gitgutter.git'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" -------------------- Vundle Setting End --------------------------------------

" -------------------- YouCompleteMe Setting Start -----------------------------
"let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=1
let g:ycm_min_num_of_chars_for_completion=1 " Char num start completion
let g:ycm_python_binary_path=##python_path

nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>f :YcmCompleter GoToDefinition<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>
nnoremap <leader>p :YcmCompleter GetParent<CR>
" -------------------- YouCompleteMe Setting End -------------------------------

" -------------------- SnipMate Setting Start ----------------------------------
imap ;s <Plug>snipMateNextOrTrigger
" -------------------- SnipMate Setting End ------------------------------------

" -------------------- Solarized Setting Start ---------------------------------
let g:solarized_termcolors=256
let g:solarized_visibility="high"
let g:solarized_contrast="high"
set background=dark
colorscheme solarized
" -------------------- Solarized Setting End -----------------------------------

" -------------------- vim-airline Setting Start -------------------------------
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'
set hidden
nnoremap <leader>T :enew<CR>
nnoremap <leader>l :bnext<CR>
nnoremap <leader>h :bprevious<CR>
nnoremap <leader>q :bp <BAR> bd #<CR>
nnoremap <leader>bl :ls<CR>
" -------------------- vim-airline Setting End ---------------------------------

" -------------------- ctrlp Setting Start -------------------------------------
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = {
            \  'dir': '\v[\/](\.(git|hg|svn)|\_site)$',
            \  'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
            \}
let g:ctrlp_working_path_mode='r'
" -------------------- ctrlp Setting End ---------------------------------------

" -------------------- nerdtree Setting Start ----------------------------------
"function! StartNERDTree()
"    :NERDTree
"    call feedkeys("\<C-w>\<C-w>")
"endfunction

function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
"                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction

function! NERDTreeResize(size)
    :let g:NERDTreeWinSize=a:size
    :NERDTree
endfunction

"autocmd VimEnter * call StartNERDTree()
autocmd WinEnter * call NERDTreeQuit()

command! -nargs=1 Nre call NERDTreeResize(<f-args>)

let NERDTreeWinPos="left"
let g:NERDTreeWinSize=31
"let g:NERDTreeShowHidden=1

inoremap <leader>1 <ESC>:NERDTreeToggle<CR>
nnoremap <leader>1 :NERDTreeToggle<CR>
nmap <F7> <leader>1
nnoremap <leader>r1 :NERDTree .<CR><C-W><C-W>
" -------------------- nerdtree Setting End ------------------------------------

" -------------------- cscope Setting Start ------------------------------------
function! CscopeUpdate()
    let curr_path = expand( "%:p:h" )
    let home_path = system( "echo ~" . system( "echo $USER" ) )
    let home_path = strpart( home_path, 0, strlen( home_path ) - 1 )
    let find = 0

    while ( matchstr( curr_path, home_path ) != '' )
        if ( filereadable( curr_path . "/cscope.out" ) )
            let cmd = "rm " . curr_path . "/cscope.files"
            let res = system( cmd )
            let find = 1
        endif

        if ( filereadable( curr_path . "/cscope.files" ) )
            let cmd = "rm " . curr_path . "/cscope.files"
            let res = system( cmd )
            let find = 1
        endif

        if ( find == 1 )
            let cmd = "find " . curr_path . " \\( -name '*.c' -o -name 
                        \ '*.cpp' -o -name '*.cc' -o -name '*.h' -o -name '*.s'
                        \ -o -name '*.S' \\) -print > " . curr_path . "
                        \/cscope.files"
            let res = system( cmd )
            
            let cmd = "cscope -i " . curr_path . "/cscope.files"
            let res = system( cmd )

            let cmd = "mv ./cscope.out " . curr_path
            let res = system( cmd )

            execute "silent! cs add " . curr_path . "/cscope.out"

            silent! cs reset

            return
        endif

        let curr_path = strpart( curr_path, 0, match( curr_path, "/[^/]*$" ) )
    endwhile
endfunction

autocmd BufWritePost * call CscopeUpdate()
set csprg=##cscope_path
set csto=0
set cst
set csverb
" -------------------- cscope Setting End --------------------------------------

" -------------------- Taglist Setting Start -----------------------------------
function! TaglistResize(size)
    :let g:Tlist_WinWidth=a:size
    :TlistClose
    :TlistOpen
endfunction

filetype on
let Tlist_Ctags_Cmd=##ctags_path
let Tlist_Inc_Winwidth=0
let Tlist_Exit_OnlyWindow=0
"let Tlist_Auto_Open=1
let Tlist_Use_Right_Window=1
let g:Tlist_WinWidth=34
set updatetime=500
autocmd CursorHold * TlistUpdate

command! -nargs=1 Tre call TaglistResize(<f-args>)

inoremap <leader>2 <ESC>:TlistToggle<CR>
nnoremap <leader>2 :TlistToggle<CR>
nmap <F8> <leader>2
" -------------------- Taglist Setting End -------------------------------------

" -------------------- easytags Setting Start ----------------------------------
let g:easytags_cmd=##ctags_path
set tags=./tags;
let g:easytags_dynamic_files=1
let g:easytags_updatetime_min=4000
let g:easytags_events=['BufWritePost', 'CursorMoved']
" -------------------- easytags Setting End ------------------------------------
